package com.door.security;

import java.util.Collection;

import org.springframework.security.authorization.AuthorizationDecision;
import org.springframework.security.authorization.ReactiveAuthorizationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;

import reactor.core.publisher.Mono;

public class HasAnyAuthority<T> implements ReactiveAuthorizationManager<T> {
	
    private final Collection<String> allowedAuthorities;

    public HasAnyAuthority(Collection<String> allowedAuthorities) {
        this.allowedAuthorities = allowedAuthorities;
    }

	@Override
	public Mono<AuthorizationDecision> check(Mono<Authentication> authentication, T object) {
		
		System.out.println("HAS ANY AUTHORITY");
		System.out.println(authentication);
		
        return authentication.filter(Authentication::isAuthenticated)
                .flatMapIterable(Authentication::getAuthorities)
                .map(GrantedAuthority::getAuthority).any(allowedAuthorities::contains)
                .map(AuthorizationDecision::new)
                .defaultIfEmpty(new AuthorizationDecision(false));
	}

}
