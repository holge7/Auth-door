package com.door.security;

import java.nio.charset.StandardCharsets;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.http.HttpStatus;
import org.springframework.util.SerializationUtils;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;

import com.door.jwt.JwtUtils;
import com.door.utils.ApiResponse;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Configuration
public class LogginFilter implements WebFilter{
    Log logger = LogFactory.getLog(getClass());
    
    JwtUtils jwtUtils;
    
    public LogginFilter(JwtUtils jwtUtils) {
    	this.jwtUtils = jwtUtils;
    }

	@Override
	public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {

		System.out.println("================");
		System.out.println("Loggin Filter");
		System.out.println("================");
	
		// Get Authorization Header
		String jwt = exchange.getRequest().getHeaders().getFirst("Authorization");
		
		// User try to access as auth user
		if (jwt!=null) {
			if (jwtUtils.validateJwtToken(jwt)) {
				System.out.println("Email: "+jwtUtils.getEmailNameFromJwtToken(jwt));
			} else {
				exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
				byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_8);
		        DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(bytes);
		        exchange.getResponse().writeWith(Flux.just(buffer));
		        exchange.getResponse().setStatusCode(HttpStatus.BAD_GATEWAY);
		        //return exchange.getResponse().setComplete();
		        return Mono.empty();
			}
		}
		
		// jwt valid and user is authenticated or user try to access as anonymous
		return chain.filter(exchange);
	}
	
	public byte[] setBodyResponse(ApiResponse response) {
		// Serialize response
		//return SerializationUtils.serialize(response);
		return "Some text".getBytes(StandardCharsets.UTF_8);
	}
	
}