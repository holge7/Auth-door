package com.door.security;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Component;

import com.door.jwt.JwtUtils;

import io.jsonwebtoken.Claims;
import reactor.core.publisher.Mono;

@Component
public class CustomAuthenticationManager implements ReactiveAuthenticationManager {
	
	@Autowired
	JwtUtils jwtUtil;

	@Override
	public Mono<Authentication> authenticate(Authentication authentication) {
		
		System.out.println("???????????????");
		System.out.println("CUSTOM AUTH MANAGER");
		System.out.println("???????????????");
		String jwt = authentication.getCredentials().toString();
		
		try {
            if (!jwtUtil.validateJwtToken(jwt)) {
                return Mono.empty();
            }
            Claims claims = jwtUtil.getAllClaimsFromToken(jwt);
            List<String> rolesMap = claims.get("roles", List.class);
            List<GrantedAuthority> authorities = new ArrayList<>();
            for (String roleMap : rolesMap) {
                authorities.add(new SimpleGrantedAuthority(roleMap));
            }
            return Mono.just(new UsernamePasswordAuthenticationToken(claims.getSubject(), null, authorities));
        } catch (Exception e) {
            return Mono.empty();
        }
	}

}
